// automatically generated by the FlatBuffers compiler, do not modify

package uci.edu.cs230.toy_cdn.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RelayHeader extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static RelayHeader getRootAsRelayHeader(ByteBuffer _bb) { return getRootAsRelayHeader(_bb, new RelayHeader()); }
  public static RelayHeader getRootAsRelayHeader(ByteBuffer _bb, RelayHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RelayHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long requestSeq() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String fileId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fileIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createRelayHeader(FlatBufferBuilder builder,
      long requestSeq,
      int fileIdOffset) {
    builder.startTable(2);
    RelayHeader.addRequestSeq(builder, requestSeq);
    RelayHeader.addFileId(builder, fileIdOffset);
    return RelayHeader.endRelayHeader(builder);
  }

  public static void startRelayHeader(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addRequestSeq(FlatBufferBuilder builder, long requestSeq) { builder.addLong(0, requestSeq, 0L); }
  public static void addFileId(FlatBufferBuilder builder, int fileIdOffset) { builder.addOffset(1, fileIdOffset, 0); }
  public static int endRelayHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRelayHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedRelayHeaderBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RelayHeader get(int j) { return get(new RelayHeader(), j); }
    public RelayHeader get(RelayHeader obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

